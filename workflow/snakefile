import pandas as pd
import re
import os

exec(open("workflow/snakemake_functions.py").read())
samples = pd.read_csv("resources/sample_lists/sample_list.tsv", sep = "\t")["sample_names"].tolist()
cfDNA_samples = list(filter(lambda x: "cfDNA" in x, samples))
WBC_samples = list(filter(lambda x: "WBC" in x, samples))

pair1 = [sample+"_1.fq.gz" for sample in samples]
pair2 = [sample+"_2.fq.gz" for sample in samples]
all_pairs = pair1 + pair2

configfile: "config/config.yaml"

PATH_hg38 = config["PATH_hg38"]
PATH_hg38_dict = config["PATH_hg38_dict"]
PATH_bed = config["PATH_bed"]
PATH_bed_intervals = config["PATH_bed_intervals"]
PATH_baits = config["PATH_baits"]
PATH_adapters = config["PATH_adapters"]
PATH_known_indels = config["PATH_known_indels"]
PATH_gold_std_indels = config["PATH_gold_std_indels"]
PATH_SNP_db = config["PATH_SNP_db"]
PATH_germline = config["PATH_germline"]
PATH_PoN = config["PATH_PoN"]

# data files
DIR_results = config["DIR_results"]
DIR_fastq = config["DIR_fastq"]
DIR_bams = config["DIR_bams"]
DIR_metrics = config["DIR_metrics"]
DIR_metrics = config["DIR_metrics"]

# cnvkit
chip_probes_bed = config["chip_probes_bed"]
cfDNA_reference = config["cfDNA_reference"]
WBC_reference = config["WBC_reference"]

###################################################
# TARGET FILES FOR RULE ALL
###################################################
RUN_FastQC_merged = expand(
    DIR_results + "/reports/fastqc/merged/{wildcard}_fastqc.html", wildcard=all_pairs
)
RUN_FastQC_trimmed = expand(
    DIR_results + "/reports/fastqc/trimmed/{wildcard}_fastqc.html", wildcard=all_pairs
)
MASK_FastQ = expand(DIR_fastq + "/masked/{wildcard}_masked.fastq", wildcard=all_pairs)

TRIM_FastQ = [
    expand(DIR_fastq + "/trimmed/{wildcard}_1.fq.gz", wildcard=samples),
    expand(DIR_fastq + "/trimmed/{wildcard}_2.fq.gz", wildcard=samples),
]

make_consensus = expand(
    DIR_bams + "/{consensus_type}_fixmate/{wildcard}.bam",
    consensus_type=["SSCS2"],
    wildcard=samples,
)

filter_consensus = expand(
    DIR_bams + "/{consensus_type}_final/{wildcard}.bam.bai",
    consensus_type=["SSCS2"],
    wildcard=samples,
)

RUN_fastq_read_counts = expand(
    DIR_metrics + "/read_counts/{wildcard}.txt", wildcard=samples
)

call_variants_chip = expand(
    DIR_results + "/variant_calling_chip/{variant_caller}/{consensus_type}/{wildcard}.vcf.gz",
    variant_caller=["freebayes", "Mutect2", "Vardict"],
    consensus_type=["SSCS2"],
    wildcard=samples,
    )

call_variants_somatic = expand(
    DIR_results + "/variant_calling_somatic/{variant_caller}/{consensus_type}/{wildcard}.vcf.gz",
    variant_caller=["Mutect2", "Vardict"],
    consensus_type=["SSCS2"],
    wildcard=cfDNA_samples,
    )

run_annovar_chip = expand(
    DIR_results + "/data/annovar_outputs/{variant_caller}/{consensus_type}/{wildcard}.hg38_multianno.txt",
    variant_caller=["Mutect2", "freebayes", "Vardict"],
    consensus_type=["SSCS2"],
    wildcard=samples,
)

run_annovar_somatic = expand(
    DIR_results + "/data/annovar_outputs_somatic/{variant_caller}/{consensus_type}/{wildcard}.hg38_multianno.vcf",
    variant_caller=["freebayes"],
    consensus_type=["SSCS2"],
    wildcard=cfDNA_samples,
)

# vcfToTable_chip = expand(
#     DIR_results + "/data/annovar_outputs/{variant_caller}/{consensus_type}/{wildcard}.hg38_multianno.txt",
#     variant_caller=["Mutect2", "Vardict", "freebayes"],
#     consensus_type=["SSCS1"],
#     wildcard=samples,
# )


run_insert_size = expand(
    DIR_insertsize_metrics + "/{consensus_type}/{wildcard}.txt",
    consensus_type=["SSCS2"],
    wildcard=samples,
)

# PDF_to_PNG = expand(DIR_insertsize_figures_PNG + "/{wildcard}.png", wildcard=samples)
run_depth = expand(
    DIR_metrics + "/depth/{consensus_type}/{wildcard}.txt",
    consensus_type=["SSCS2"],
    wildcard=samples,
)

RUN_mpileup = expand(
    DIR_metrics + "/mpileup/{consensus_type}/{wildcard}.mpileup",
    consensus_type=["SSCS2"],
    wildcard=samples,
)

collect_HS_metrics = expand(
    DIR_metrics + "/PICARD_HS_metrics/{consensus_type}/{wildcard}.HS_metrics",
    consensus_type=["SSCS2"],
    wildcard=samples,
)

collect_alignment_summary_metrics = expand(
    DIR_metrics + "/PICARD_alignment_summary/{consensus_type}/{wildcard}.alignment_summary_metrics",
    consensus_type=["SSCS2"],
    wildcard=samples,
)

variant_table_somatic = expand(
    DIR_results + "/data/variant_tables/somatic/{variant_caller}/{consensus_type}/{wildcard}.tsv",
    consensus_type=["SSCS2"],
    wildcard=cfDNA_samples,
    variant_caller=["Mutect2", "Vardict"],
)

variant_table_chip = expand(
    DIR_results + "/data/variant_tables/chip/{variant_caller}/{consensus_type}/{wildcard}.tsv",
    consensus_type=["SSCS2"],
    wildcard=samples,
    variant_caller=["Vardict", "Mutect2", "freebayes"],
)

# SV callers
# run_gridss = expand(DIR_results + "/gridss/{wildcard}.vcf.gz", wildcard=cfDNA_samples)

# COPY NUMBER RELATED
# generate_target_coverage = expand(DIR_results + "/cnvkit/coverage/SSCS2/{wildcard}.targetcoverage.cnn", wildcard=samples + VIP_normals_cfDNA + VIP_normals_wbc)

# cfDNA_corrected = expand(DIR_results + "/cnvkit/coverage_fixed/cfDNA/{wildcard}.cnr", wildcard=cfDNA_samples)
# WBC_corrected = expand(DIR_results + "/cnvkit/coverage_fixed/WBC/{wildcard}.cnr", wildcard=WBC_samples)
# segmented_samples_cfDNA = expand(DIR_results + "/cnvkit/segmented/{sample_type}/{wildcard}.cns", wildcard=cfDNA_samples, sample_type="cfDNA")
# segmented_samples_WBC = expand(DIR_results + "/cnvkit/segmented/{sample_type}/{wildcard}.cns", wildcard=WBC_samples, sample_type="WBC")

# only use expansion here
rule all:
    input:
        # RUN_FastQC_merged,
        # RUN_FastQC_trimmed,
        RUN_mpileup,
        RUN_fastq_read_counts, 
        # run_insert_size, 
        make_consensus,
        filter_consensus,
        call_variants_chip,
        run_annovar_chip,
        # call_variants_somatic,
        # run_annovar_somatic,
        run_depth, 
        # collect_HS_metrics,
        collect_alignment_summary_metrics,
        # variant_table_somatic,
        variant_table_chip,
        # DIR_results + "/cnvkit/coverage/SSCS2/Reference_for_CH_CN.cnn",
        # DIR_results + "/cnvkit/coverage/SSCS2/Reference_for_somatic_CN.cnn",
        # DIR_results + "/cnvkit/references/VIP_cfDNA_reference.cnn",
        # DIR_results + "/cnvkit/references/VIP_WBC_reference.cnn",
        # cfDNA_corrected,
        # WBC_corrected,
        # segmented_samples_cfDNA,
        # segmented_samples_WBC,
        # generate_target_coverage,
        # cfDNA_corrected,
        # WBC_corrected,


##### Modules #####
include: "rules/process_fastq.smk"
include: "rules/make_consensus_bams.smk"
include: "rules/filter_consensus_bams.smk"
include: "rules/run_metrics.smk"
include: "rules/variant_calling.smk"
include: "rules/variant_calling_somatic.smk"
include: "rules/annotation.smk"
include: "rules/index_bams.smk"